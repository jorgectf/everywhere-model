/*
 * Everywhere
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pro.travelin.api;

import pro.travelin.invoker.ApiCallback;
import pro.travelin.invoker.ApiClient;
import pro.travelin.invoker.ApiException;
import pro.travelin.invoker.ApiResponse;
import pro.travelin.invoker.Configuration;
import pro.travelin.invoker.Pair;
import pro.travelin.invoker.ProgressRequestBody;
import pro.travelin.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import pro.travelin.model.InlineResponse200;
import pro.travelin.model.InlineResponse2001;
import pro.travelin.model.InlineResponse404;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getItenerary
     * @param iteneraryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetItenerary 200 response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NoSuchResource 404 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIteneraryCall(String iteneraryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iteneraries/{iteneraryId}"
            .replaceAll("\\{" + "iteneraryId" + "\\}", localVarApiClient.escapeString(iteneraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIteneraryValidateBeforeCall(String iteneraryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'iteneraryId' is set
        if (iteneraryId == null) {
            throw new ApiException("Missing the required parameter 'iteneraryId' when calling getItenerary(Async)");
        }
        

        okhttp3.Call localVarCall = getIteneraryCall(iteneraryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param iteneraryId  (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetItenerary 200 response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NoSuchResource 404 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 getItenerary(String iteneraryId) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = getIteneraryWithHttpInfo(iteneraryId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param iteneraryId  (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetItenerary 200 response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NoSuchResource 404 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> getIteneraryWithHttpInfo(String iteneraryId) throws ApiException {
        okhttp3.Call localVarCall = getIteneraryValidateBeforeCall(iteneraryId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param iteneraryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetItenerary 200 response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NoSuchResource 404 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIteneraryAsync(String iteneraryId, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIteneraryValidateBeforeCall(iteneraryId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIteneraries
     * @param limit  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListIteneraries 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItenerariesCall(BigDecimal limit, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iteneraries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItenerariesValidateBeforeCall(BigDecimal limit, String nextToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listItenerariesCall(limit, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param nextToken  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListIteneraries 200 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 listIteneraries(BigDecimal limit, String nextToken) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = listItenerariesWithHttpInfo(limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListIteneraries 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> listItenerariesWithHttpInfo(BigDecimal limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listItenerariesValidateBeforeCall(limit, nextToken, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListIteneraries 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItenerariesAsync(BigDecimal limit, String nextToken, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItenerariesValidateBeforeCall(limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
